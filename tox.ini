[tox]
skip_missing_interpreters=True
envlist =
    {py39-,py310-,py311-,py312-,}{doctest,unit}{-cover,}
    {py39-,py310-,py311-,py312-,}{coverage}{,-serve},
    {py39-,py310-,py311-,py312-,}{lint,type}{-check,},
    {py39-,py310-,py311-,py312-,}{docs}{-build}{,-versions},
    licenses

[testenv]
skip_install = true
setenv =
    PYTHONPATH={toxinidir}
    PYTHONUNBUFFERED=yes
    PYTHONASYNCIODEBUG=1
passenv =
    *
usedevelop = false
allowlist_externals =
    bash
    rm
    printf
    false
    poetry
    git
commands =
    printf "ERROR: unknown environment '%s'\n" {envname}
    printf "Maybe factors where given in the wrong order?\n"
    false

[flags]
cover = --cov=lscealice --cov-config=.coveragerc --cov-report=term --cov-report=xml
profile = --profile-svg
debug = --pdb
watch = ptw . --runner

[testenv:{py39-,py310-,py311-,py312-,}{unit}{-cover,}{-profile,}{-debug,}]
commands_pre = poetry install \
    cover: --with cover \
    profile: --with profile \
    debug: --with debug \
    --with test
commands = poetry run \
    watch: {[flags]watch} \
    pytest -n auto -vv \
    profile: {[flags]profile} \
    cover: {[flags]cover} \
    debug: {[flags]debug} \
    {posargs:lscealice}

[testenv:{py39-,py310-,py311-,py312-,}{doctest}{-cover,}]
commands_pre = poetry install \
    cover: --with cover \
    --with test
commands = poetry run \
    watch: {[flags]watch} \
    pytest -n auto -vv \
    profile: {[flags]profile} \
    cover: {[flags]cover} \
    debug: {[flags]debug} \
    --doctest-modules --ignore-glob="*-test.py" {posargs:lscealice}

[testenv:{py39-,py310-,py311-,py312-,}{lint}{-check,}]
commands_pre =
    poetry install --no-root --only lint
commands =
    poetry run ruff check \
    !check: --fix \
    {posargs:lscealice}
    poetry run ruff format \
    check: --check --diff \
    {posargs:lscealice}

[testenv:{py39-,py310-,py311-,py312-,}{type-check}]
commands_pre =
    poetry install --no-root --with test --with type
commands =
    poetry run pyright {posargs:lscealice}

[testenv:{py39-,py310-,py311-,py312-,}{coverage}]
commands_pre =
    poetry install --no-root --only coverage
commands =
    poetry run coverage {posargs:report}

[testenv:{py39-,py310-,py311-,py312-,}{coverage-serve}]
commands =
    python -m http.server 8000 -d htmlcov/

[testenv:{py39-,py310-,py311-,py312-,}{docs-build}]
commands_pre =
    poetry install --with docs
commands =
    poetry run sphinx-build {posargs:} -j auto -b html docs build/docs

[testenv:{py39-,py310-,py311-,py312-,}{docs-build-versions}]
commands_pre =
    poetry install --with docs
commands =
    poetry run sphinx-multiversion docs build/docs {posargs:}

[testenv:vacuum-clean]
commands_pre =
    poetry install --no-root --only coverage
commands =
    poetry run coverage erase
    rm -rf coverage.lcov coverage.json coverage.xml htmlcov/ dist/

[testenv:licenses]
commands_pre =
    poetry install --no-root --only licenses
commands =
    poetry run pip-licenses \
    --from=mixed \
    --allow-only="\
        The Unlicense (Unlicense);\
        CC0 1.0 Universal (CC0 1.0) Public Domain Dedication;\
        Python Software Foundation License;\
        ISC;\
        ISC License (ISCL);\
        GNU Lesser General Public License v2 or later (LGPLv2+);\
        GNU Lesser General Public License v3 or later (LGPLv3+);\
        GNU Lesser General Public License v3 (LGPLv3);\
        MIT;\
        MIT License;\
        MIT X11 style;\
        BSD;\
        BSD License;\
        BSD-2-Clause;\
        BSD-3-Clause;\
        BSD 3-Clause;\
        Apache 2.0;\
        Apache Software License;\
        Mozilla Public License 2.0 (MPL 2.0)\
    " \
    {posargs}

[testenv:release]
commands_pre =
    poetry install --no-root --only release
commands =
    poetry run bump-my-version bump {posargs:}
    git tag -af 'latest' -m 'Latest stable release.'
    git push origin :refs/tags/latest
    git push
    git push --tags
